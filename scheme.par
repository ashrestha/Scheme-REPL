[*
var sexprCount = 0;
var NIL = {type:'NIL', val: null};
var list = function (x, y) { return cons(x, cons(y, NIL)); };
var quote = function (x) { return list(intern("quote", x)); };
var backquote = function (x) {return list(intern("backquote", x)); };
var comma = function (x)  {return list(intern("comma", x)); };
var at = function (x)  {return list(intern("at", x)); };
var append_improper_tail = function (list, x) { return FIXME; };
var cons = function (x,y) {return {type:'CONS', val:[x,y]}; };
var intern = function (x) {return {type:'SYMBOL', val:x}; };
var dump = function (x) { print(JSON.stringify(x)); };
*]

/~ Tokens Definitions for Scheme Syntax ~/

/~ Tokens to be ignored (e.g. whitespace, comments) ~/
! ' |\t|\r\n|\n|;[^\n]*\n' 
;

/~ Token pattern matching rules ~/
  '\('    RPAREN
  '\)'    LPAREN
        '\.'    DOT
  '\'' QUOTE
  '\`' BACKQUOTE
  '\,' COMMA
  '\@' AT
  '[0-9]+|[0-9]+\.[0-9]*|[0-9]*\.[0-9]+'    NUMBER [* %match = parseFloat( %match ); *]
  '[^\(\)0-9\.\'\`\,\@].*'  SYMBOL    /~ symbols cannot begin with digits, parens, quotes, dots, etc. ~/
        '\"[^"]*\"' STRING  

                           /~ [* %match = %match.substr( 1, %match.length - 2 ); *] ~/
;

##

/~ Grammar rules ~/

/~ if you like you can use a grammar rule to drive the REPL, but perhaps better to write a while loop...

repl:   repl sexpr   [* sexprCount++;
                      print(sexprCount + "> ");
          dump(%2);
        *]
      | sexpr	 [* print("Welcome to SJSU Tiny Scheme\n");
	        sexprCount++;
                      print(sexprCount + "> ");
          dump(%2);
        *]

   ;
~/

readonce:  sexpr;
                          [* /~ FIXME: add some code to print out your structure ~/ *]

sexpr:    list
  | atom
  | QUOTE sexpr      [* %% = quote(%2); *]
  | BACKQUOTE sexpr  [* %% = backquote(%2); *]
  | COMMA sexpr	   [* %% = comma(%2); *]
  | AT sexpr     [* %% = at(%2); *]
  ;

list:     LPAREN RPAREN	              [* %% = null; *]
	| LPAREN members RPAREN      [* %% = %2; *]
	| LPAREN members DOT sexpr RPAREN    [* %% = append_improper_tail(%2, %4); *]
  ;

members:  members sexpr      [* %% = cons(%1, %2); *]
  | sexpr
        ;

atom:   NUMBER   [* %% = {type:'number', val:%1}; *]
      | SYMBOL   [* %% = intern(%1); *]
      | STRING   [* %% = {type:'string', val:%1}; *]
      ;

[*
var error_offsets = new Array();
var error_lookaheads = new Array();
var error_count = 0;

/* Switching one of these variables on will enable debug facilities
        of the various parser drivers */
//##PREFIX##_dbg_withtrace = true;
//##PREFIX##_dbg_withparsetree = true;
//##PREFIX##_dbg_withstepbystep = true;

console.log("Welcome to the Scheme REPL by Travis Hoover");

process.stdin.resume();
process.stdin.setEncoding('utf8'); 
process.stdout.write("> ");

process.stdin.on('data', function (text) {

  // Send text to scheme lex
  if( ( error_count = __NODEJS_parse( text, error_offsets, error_lookaheads ) ) > 0 )
  {
      for( var i = 0; i < error_count; i++ )
          console.log( "Parse error near " + text.substr( error_offsets[i] ) + ", expecting \"" + error_lookaheads[i].join() + "\"" );
  }



  console.log('> ' + text); // print the read stage text back as the print stage

  process.stdout.write("> "); // now loop or wait for user input again
 });
*]
