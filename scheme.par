[*

var result = null;

var create_null = function () { return { type:'NULL' }; }
var create_string = function (x) { return { type:'STRING', val:x }; }
var create_symbol = function (x) { return { type:'SYMBOL', val:x }; }
var create_number = function (x) { return { type:"NUMBER", val:x }; }
var create_list = function (x) { return { type:'LIST', val:[x] }; }
var array_append = function (x, y) { return [x,y]; }

*]

/~ Tokens Definitions for Scheme Syntax ~/

/~ Tokens to be ignored (e.g. whitespace, comments) ~/
! ' |\t|\r\n|\n|;[^\n]*\n' 
;

/~ Token pattern matching rules ~/
    '\)'    RPAREN
    '\s'     SPACE
    '\('    LPAREN
    '\.'    DOT
    '[0-9]+[ ]?|[0-9]+\.[0-9]*|[0-9]*\.[0-9]+'    NUMBER   [* %match = parseFloat( %match ); *]
    '[^\(\)0-9\.\'\`\,\@"].*'                 SYMBOL   /~ symbols cannot begin with digits, parens, quotes, dots, etc. ~/
    '\"[^"]*\"'                               STRING   [* %match = %match.substr( 1, %match.length - 2 ); *]
  ;

##


readonce:   sexpr                                    [* result = %1; *]
            ;

sexpr:      atom                                      
            | list                                   [* %% = %1; *]
            ;

list:       LPAREN RPAREN	                         [* %% = create_null(); *]
	        | LPAREN members RPAREN                  [* %% = create_list(%2) *]
            ;

members:    members sexpr                            [* %% = array_append(%1, %2); *]
            | sexpr                                  [* %% = %1; *]
            ;

atom:       NUMBER                                   [* %% = create_number(%1); *]
            | SYMBOL                                 [* %% = create_symbol(%1); *]
            | STRING                                 [* %% = create_string(%1); *]
            | SPACE
            ;
            


[*
var error_offsets = new Array();
var error_lookaheads = new Array();
var error_count = 0;

/* Switching one of these variables on will enable debug facilities
        of the various parser drivers */
//##PREFIX##_dbg_withtrace = true;
//##PREFIX##_dbg_withparsetree = true;
//##PREFIX##_dbg_withstepbystep = true;

console.log("Welcome to the Scheme REPL by Travis Hoover\n");

process.stdin.resume();
process.stdin.setEncoding('utf8'); 
process.stdout.write("> ");

process.stdin.on('data', function (text) {

    if( text.trim() != "" ) {
    
        // Send text to scheme lex
        if( ( error_count = __NODEJS_parse( text.trim(), error_offsets, error_lookaheads ) ) > 0 ) {
       
            for( var i = 0; i < error_count; i++ )
                console.log( "Parse error near " + text.substr( error_offsets[i] ) + ", expecting \"" + error_lookaheads[i].join() + "\"" );
        }
        else {
      
            console.log('> ' + JSON.stringify(result)); // print the read stage text back as the print stage
            console.log(text);
        }
    }

    process.stdout.write("> "); // now loop or wait for user input again
});
*]
